{"cursor":"3429","size":15,"audio":[],"currentlang":"en","article":"\nIn computational complexity theory, the 'complement' of a decision problem is\nthe decision problem resulting from reversing the yes and no answers.\nEquivalently, if we define decision problems as sets of finite strings, then the\ncomplement of this set over some fixed domain is its complement problem.\n\nFor example, one important problem is whether a number is a prime number. Its\ncomplement is to determine whether a number is a composite number (a number\nwhich is not prime). Here the domain of the complement is the set of all\nintegers exceeding one.\n\nThere is a Turing reduction from every problem to its complement problem. The\ncomplement operation is an involution, meaning it \"undoes itself\", or the\ncomplement of the complement is the original problem.\n\nWe can generalize this to the complement of a complexity class, called the\n'complement class', which is the set of complements of every problem in the\nclass. If a class is called 'C', its complement is conventionally labelled 'co-\nC'. Notice that this is not the complement of the complexity class itself as a\nset of problems, which would contain a great deal more problems.\n\nA class is said to be closed under complement if the complement of any problem\nin the class is still in the class. Because there are Turing reductions from\nevery problem to its complement, any class which is closed under Turing\nreductions is closed under complement. Any class which is closed under\ncomplement is equal to its complement class. However, under many-one reductions,\nmany important classes, especially NP, are believed to be distinct from their\ncomplement classes (although this has not been proven).\n\nThe closure of any complexity class under Turing reductions is a superset of\nthat class which is closed under complement. The closure under complement is the\nsmallest such class. If a class is intersected with its complement, we obtain a\n(possibly empty) subset which is closed under complement. Some interesting\nproblems fall into such intersections, such as the integer factorization, which\nis in the intersection of NP and co-NP.\n\nEvery deterministic complexity class ('DSPACE'(f(n)), 'DTIME'(f(n)) for all\nf(n)) is closed under complement, because one can simply add a last step to the\nalgorithm which reverses the answer. This doesn't work for nondeterministic\ncomplexity classes, because if there exist both computation paths which accept\nand paths which reject, and all the paths reverse their answer, there will still\nbe paths which accept and paths which reject — consequently, the machine\naccepts in both cases.\n\nSome of the most surprising complexity results shown to date showed that the\ncomplexity classes NL and SL are in fact closed under complement, whereas before\nit was widely believed they were not (see ImmermanâSzelepcsÃ©nyi theorem). The\nlatter has become less surprising now that we know 'SL' equals '[[L\n(complexity)|L]]', which is a deterministic class.\n\nEvery class which is low for itself is closed under complement.\n","linknr":-1,"url":"Complement_(complexity)","recorded":1362893473,"links":0,"instances":["complexity","complexity","mathematics","complexity","mathematics","set_theory","complexity"],"pdf":[],"categories":["Computational complexity theory"],"headings":[],"image":[],"tags":[["complement","set_theory"],["involution","mathematics"],["np","complexity"],["closure","mathematics"],["np","complexity"],["nl","complexity"],["sl","complexity"],["low","complexity"]],"members":["sl","np","involution","low","closure","complement","nl"],"related":["Computational_complexity_theory","Decision_problem","Complement_(set_theory)","Prime_number","Composite_number","Turing_reduction","Involution_(mathematics)","Complexity_class","Many-one_reduction","NP_(complexity)","Closure_(mathematics)","Integer_factorization","NP_(complexity)","Co-NP","NL_(complexity)","SL_(complexity)","Immerman–Szelepcsényi_theorem","Low_(complexity)"]}