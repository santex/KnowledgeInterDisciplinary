{"cursor":"6305","size":15,"audio":[],"currentlang":"en","article":"A 'Lagged Fibonacci generator (LFG)' is an example of a pseudorandom number\ngenerator. This class of random number generator is aimed at being an\nimprovement on the 'standard' linear congruential generator. These are based on\na generalisation of the Fibonacci sequence.\n\nThe Fibonacci sequence may be described by the recurrence relation:\n\n: S_n = S_{n-1} + S_{n-2}\n\nHence, the new term is the sum of the last two terms in the sequence. This can\nbe generalised to the sequence:\n\n: S_n \\equiv S_{n-j} \\star S_{n-k} \\pmod{m}, 0 \n\nIn which case, the new term is some combination of any two previous terms. m is\nusually a power of 2 (m = 2 M), often 2 32 or\n2 64 . The \\star operator denotes a general binary\noperation. This may be either addition, subtraction, multiplication, or the\nbitwise arithmetic exclusive-or operator (XOR). The theory of this type of\ngenerator is rather complex, and it may not be sufficient simply to choose\nrandom values for j and k. These generators also tend to be very sensitive to\ninitialisation.\n\nGenerators of this type employ k words of state (they 'remember' the last\nk values).\n\nIf the operation used is addition, then the generator is described as an\nAdditive Lagged Fibonacci Generator or ALFG, if multiplication is used, it is a\nMultiplicative Lagged Fibonacci Generator or MLFG, and if the XOR operation is\nused, it is called a Two-tap [[generalised feedback shift register]] or GFSR.\nThe Mersenne twister algorithm is a variation on a GFSR. The GFSR is also\nrelated to the Linear Feedback Shift Register, or LFSR.\n","linknr":130,"url":"Lagged_Fibonacci_generator","recorded":1362372620,"links":16,"instances":["field_theory","cryptography","cipher"],"pdf":[],"categories":["Pseudorandom number generators","Fibonacci numbers"],"headings":["Properties of lagged Fibonacci generators","Problems with LFGs","Usage","See also","References"],"image":["//upload.wikimedia.org/math/e/d/e/edef569eb502fb2a794ae95e322a6ae9.png","//upload.wikimedia.org/math/d/8/b/d8b26fd0a6fff8dbb39f7c3292237d04.png","//upload.wikimedia.org/math/2/3/d/23d64887f9c2add7a296e5b99acbbdfb.png","//upload.wikimedia.org/math/4/3/c/43caef0ffe4aa855b644d6cba0955d6d.png","//upload.wikimedia.org/math/e/5/9/e59777e798f8aa41050f814e0e379c78.png","//upload.wikimedia.org/math/e/0/4/e04b67affc3123287ebd5aa22defac18.png","//upload.wikimedia.org/math/5/5/6/556045fb67db4524c5d9f58a47083a76.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["primitive_polynomial","field_theory"],["fish","cipher"],["pike","cryptography"]],"members":["primitive_polynomial","pike","fish"],"related":["Pseudorandom_number_generator","Random_number_generator","Linear_congruential_generator","Fibonacci_sequence","Recurrence_relation","Binary_operation","Bitwise_operation","XOR","Mersenne_twister","LFSR","Primitive_polynomial_(field_theory)","Golden_ratio","Robert_M._Ziff","George_Marsaglia","Diehard_tests","Freeciv","Boost_library","Subtract_with_carry","C++11","Oracle_Database","Linear_congruential_generator","Mersenne_twister","FISH_(cipher)","Pike_(cryptography)","VIC_cipher"]}