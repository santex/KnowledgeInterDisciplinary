{"cursor":"26461","size":15,"audio":[],"currentlang":"en","article":"\nIn computer science, an 'abstract data type' ('ADT') is a mathematical model for\na certain class of data structures that have similar behavior; or for certain\ndata types of one or more programming languages that have similar semantics. An\nabstract data type is defined indirectly, only by the operations that may be\nperformed on it and by mathematical constraints on the effects (and possibly\ncost) of those operations. Barbara Liskov, Programming with\nAbstract Data Types, in Proceedings of the ACM SIGPLAN Symposium on Very High\nLevel Languages, pp. 50--59, 1974, Santa Monica, California\n\nFor example, an abstract stack could be defined by three operations:\npush , that inserts some data item onto the structure,\npop , that extracts an item from it (with the constraint that each\npop always returns the most recently pushed item that has not been popped yet),\nand peek , that allows data on top of the structure to be examined\nwithout removal. When analyzing the efficiency of algorithms that use stacks,\none may also specify that all operations take the same time no matter how many\nitems have been pushed into the stack, and that the stack uses a constant amount\nof storage for each element.\n\nAbstract data types are purely theoretical entities, used (among other things)\nto simplify the description of abstract algorithms, to classify and evaluate\ndata structures, and to formally describe the type systems of programming\nlanguages. However, an ADT may be implemented by specific data types or data\nstructures, in many ways and in many programming languages; or described in a\nformal specification language. ADTs are often implemented as modules: the\nmodule's interface declares procedures that correspond to the ADT operations,\nsometimes with comments that describe the constraints. This information hiding\nstrategy allows the implementation of the module to be changed without\ndisturbing the client programs.\n\nThe term 'abstract data type' can also be regarded as a generalised approach of\na number of algebraic structures, such as lattices, groups, and rings. ,\nChapter 7,section 40. This can be treated as part of subject area of\nartificial intelligence. The notion of abstract data types is related to the\nconcept of data abstraction, important in object-oriented programming and design\nby contract methodologies for software development .\n","linknr":361,"url":"Abstract_data_type","recorded":1362371492,"links":39,"instances":["computer_science","computer_science","mathematics","computing","computer_science","computer_science","computer_science","computer_science","computer_science","computer_science","generic_programming","programming","abstract_data_type","computing","data_structure","data_structure","computing","computing","computer_programming","computer_science","data_structure","programming_language"],"pdf":["http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf","http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf"],"categories":["Abstract data types|","Data types","Type theory"],"headings":["Defining an abstract data type (ADT)","Advantages of abstract data typing","Typical operations","Examples","Implementation","See also","References","Further","External links"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//bits.wikimedia.org/static-1.21wmf9/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf9/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["stack","abstract_data_type"],["interface","computer_science"],["comment","computer_programming"],["client","computing"],["aliasing","computing"],["record","computer_science"],["function","mathematics"],["side_effect","computer_science"],["abstraction","computer_science"],["container","data_structure"],["list","computing"],["set","abstract_data_type#multiset"],["queue","data_structure"],["set","abstract_data_type"],["stack","data_structure"],["string","computer_science"],["tree","computer_science"],["module","programming"],["handle","computing"],["class","computer_science"],["object","computer_science"],["method","computer_science"],["lua","programming_language"],["concept","generic_programming"]],"members":["object","tree","function","aliasing","string","abstraction","side_effect","record","interface","method","concept","module","set","list","stack","container","client","handle","comment","class","queue","lua"],"related":["Computer_science","Mathematics","Data_structure","Data_type","Programming_language","Semantics","Computational_complexity","Barbara_Liskov","Stack_(abstract_data_type)","Analysis_of_algorithms","Type_system","Implementation","Data_type","Data_structure","Formal_specification_language","Modular_programming","Interface_(computer_science)","Comment_(computer_programming)","Information_hiding","Client_(computing)","Artificial_intelligence","Data_abstraction","Object-oriented_programming_language","Design_by_contract","Software_engineering","Imperative_programming","The_Art_of_Computer_Programming","Aliasing_(computing)","Record_(computer_science)","Analysis_of_algorithms","Boolean_value","Functional_programming","Function_(mathematics)","Side_effect_(computer_science)","Linked_list","Hash_cons","If_and_only_if","Abstraction_(computer_science)","Hash_function","Container_(data_structure)","Deque","List_(computing)","Associative_array","Multimap","Priority_queue","Queue_(data_structure)","Set_(abstract_data_type)","Stack_(data_structure)","String_(computer_science)","Tree_(computer_science)","Subroutine","Data_structure","Linked_list","Array_data_structure","Module_(programming)","Handle_(computing)","C++","Java_programming_language","Class_(computer_science)","Object_(computer_science)","Method_(computer_science)","Stack_data_structure","Abstract_stack","Built-in_data_type","Awk","Lua_(programming_language)","Perl","Initial_algebra","Concept_(generic_programming)","Design_by_contract","Formal_methods","Functional_specification","Liskov_substitution_principle","Object-oriented_programming","Type_system","Type_theory","Algebraic_data_type","Generalized_algebraic_data_type","NIST"]}