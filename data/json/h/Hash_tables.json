{"cursor":"47464","size":15,"audio":[],"currentlang":"en","article":"\n\n\n {{Infobox\ndata structure |name=Hash table |type=Unsorted associative array |invented_by=\n|invented_year=1953 |space_avg=O(n) {{cite book\n  | author = Thomas H. Cormen [et al.] title = Introduction to Algorithms\n  | edition = 3rd publisher = Massachusetts Institute of Technology year = 2009\n  | isbn = 978-0-262-03384-8 note = Section 11: Hash Tables, pages = 253â280\n  }} \n\n|space_worst=O(n) |search_avg=O(1 + n/k) k: number of buckets\n|search_worst=O(n) |insert_avg=O(1) |insert_worst=O(n) |delete_avg=O(1 + n/k)\n|delete_worst=O(n) }}\n\n\nIn computing, a 'hash table' (also 'hash map') is a data structure used to\nimplement an associative array, a structure that can map keys to values. A hash\ntable uses a hash function to compute an index into an array of buckets or\nslots, from which the correct value can be found.\n\nIdeally, the hash function should assign each possible key to a unique bucket,\nbut this ideal situation is rarely achievable in practice (unless the hash keys\nare fixed; i.e. new entries are never added to the table after it is created).\nInstead, most hash table designs assume that [[Collision (computer science)|hash\ncollisions]]âdifferent keys that are assigned by the hash function to the same\nbucketâwill occur and must be accommodated in some way.\n\nIn a well-dimensioned hash table, the average cost (number of instructions) for\neach lookup is independent of the number of elements stored in the table. Many\nhash table designs also allow arbitrary insertions and deletions of key-value\npairs, at constant average (indeed, amortized Charles E.\nLeiserson, [http://videolectures.net/mit6046jf05_leiserson_lec13/ Amortized\nAlgorithms, Table Doubling, Potential Method] Lecture 13, course MIT\n6.046J/18.410J Introduction to AlgorithmsâFall 2005 ) cost per\noperation. {{cite book\n  | author = Donald Knuth title = 'The Art of Computer Programming' volume = 3:\n  | Sorting and Searching edition = 2nd publisher = Addison-Wesley year = 1998\n  | isbn = 0-201-89685-0 note = Section 6.4: Hashing, pages = 513â558\n  }} \n\nIn many situations, hash tables turn out to be more efficient than search trees\nor any other table lookup structure. For this reason, they are widely used in\nmany kinds of computer software, particularly for associative arrays, database\nindexing, caches, and sets.\n","linknr":526,"url":"Hash_tables","recorded":1362901737,"links":57,"instances":["computer_science","computing","computing","computing","computer_science","programming_language","abstract_data_type","cryptography","computer_science","programming_language","computer_scientist","computer_science","discrete","programming_language","programming_language","database","computing"],"pdf":["http://crpit.com/confpapers/CRPITV91Askitis.pdf","http://crpit.com/confpapers/CRPITV91Askitis.pdf","http://courses.csail.mit.edu/6.897/spring03/scribe_notes/L2/lecture2.pdf","http://events.ccc.de/congress/2011/Fahrplan/attachments/2007_28C3_Effective_DoS_on_web_application_platforms.pdf","http://www.cs.rice.edu/~scrosby/hash/CrosbyWallach_UsenixSec2003.pdf","http://compgeom.cs.uiuc.edu/~jeffe/teaching/373/notes/06-hashing.pdf"],"categories":["Articles with example C code","Hashing|*","Search algorithms","Data structures"],"headings":["Hashing","Key statistics","Collision resolution","Dynamic resizing","Performance analysis","Features","Uses","Implementations","History","See also","References","Further reading","External links"],"image":["//upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg/315px-Hash_table_3_1_1_0_1_0_0_SP.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Hash_table_5_0_1_1_1_1_1_LL.svg/450px-Hash_table_5_0_1_1_1_1_1_LL.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Hash_table_5_0_1_1_1_1_0_LL.svg/500px-Hash_table_5_0_1_1_1_1_0_LL.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Hash_table_5_0_1_1_1_1_0_SP.svg/380px-Hash_table_5_0_1_1_1_1_0_SP.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Hash_table_average_insertion_time.png/362px-Hash_table_average_insertion_time.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/30px-Commons-logo.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["value","computer_science"],["instruction","computer_science"],["table","computing"],["cache","computing"],["uniform_distribution","discrete"],["salt","cryptography"],["collision","computer_science"],["list","abstract_data_type"],["java","programming_language"],["uniform_distribution","discrete"],["string","computing"],["interpreter","computer_science"],["index","database"],["cache","computing"],["python","programming_language"],["ruby","programming_language"],["lisp","programming_language"],["library","computing"],["unordered_map","c++"],["python","programming_language"],["nathaniel_rochester","computer_scientist"]],"members":["interpreter","table","library","string","instruction","lisp","list","salt","collision","python","nathaniel_rochester","value","uniform_distribution","java","ruby","unordered_map","index","cache"],"related":["Associative_array","Thomas_H._Cormen","Introduction_to_Algorithms","Computing","Data_structure","Associative_array","Unique_key","Value_(computer_science)","Hash_function","Instruction_(computer_science)","Amortized_analysis","Charles_E._Leiserson","Donald_Knuth","Search_tree","Table_(computing)","Software","Database_index","Cache_(computing)","Set_data_structure","Power_of_two","Bitwise_operation","Uniform_distribution_(discrete)","Karl_Pearson","Robin_Plackett","Power_function","Prime_number","Open_addressing","Cryptographic_hash_function","Modulo_operation","Bit_masking","Denial_of_service_attack","Salt_(cryptography)","Universal_hash_function","Avalanche_effect","Perfect_hash_function","Collision_(computer_science)","Birthday_problem","List_(abstract_data_type)","Linked_list","SUHA","Graceful_degradation","Sequence","Move-to-front_heuristic","Locality_of_reference","Charles_E._Leiserson","Ronald_L._Rivest","Clifford_Stein","Introduction_to_Algorithms","Self-balancing_binary_search_tree","Big_O_notation","Array_hash_table","Dynamic_array","CPU_cache","Translation_lookaside_buffer","Dynamic_perfect_hashing","Open_addressing","Linear_probing","Quadratic_probing","Double_hashing","Locality_of_reference","Serialization","CPU_cache","Coalesced_hashing","Cuckoo_hashing","Hopscotch_hashing","Cuckoo_hashing","Linear_probing","Concurrent_hash_table","Java_(programming_language)","Dynamic_array","Space-time_tradeoff","Dynamic_array","Space-time_tradeoff","Dynamic_memory_allocation","Amortized_analysis","Real-time_system","Monotonic_function","Consistent_hashing","Linear_hashing","Consistent_hashing","Dynamic_array","Random_variable","Uniform_distribution_(discrete)","Spell_checker","Trie","Finite_automata","Judy_array","Locality_of_reference","CPU_cache","Linear_search","Moore's_Law","Black_hat_hacking","Denial_of_service_attack","Universal_hashing","Associative_array","String_(computing)","Interpreter_(computer_science)","Programming_language","AWK","Perl","PHP","Multimap","Disk_drive","Index_(database)","Dbm","B-tree","Cache_(computing)","Set_data_structure","Perl","Python_(programming_language)","JavaScript","Ruby_(programming_language)","Lisp_(programming_language)","Hash_consing","Expression_tree","Library_(computing)","C++11","Unordered_map_(C++)","PHP","Daniel_J._Bernstein","Python_(programming_language)","Perl",".NET_Framework","Gene_Amdahl","Nathaniel_Rochester_(computer_scientist)","Arthur_Samuel","Rabin–Karp_string_search_algorithm","Stable_hashing","Consistent_hashing","Extendible_hashing","Lazy_deletion","Pearson_hashing","Bloom_filter","Distributed_hash_table","Hash_array_mapped_trie","Trie","Array_mapped_trie","NIST","ICI_programming_language"]}