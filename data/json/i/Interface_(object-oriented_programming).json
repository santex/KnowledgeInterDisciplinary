{"cursor":"3855","size":15,"audio":[],"currentlang":"en","article":"\n\n\nIn object-oriented programming, a 'protocol' or 'interface' is a common means\nfor unrelated objects to communicate with each other. These are definitions of\nmethods and values which the objects agree upon in order to\ncooperate.\n\nFor example, in Java (where protocols are termed interfaces), the\nComparable interface specifies a method compareTo() which\nimplementing classes should implement. This means that a separate sorting\nmethod, for example, can sort any object which implements the Comparable\ninterface, without having to know anything about the inner nature of the class\n(except that two of these objects can be compared by means of\ncompareTo() ).\n\nThe protocol is a description of:\n# The messages that are understood by the object. The arguments that these\n# messages may be supplied with. The types of results that these messages\n# return. The invariants that are preserved despite modifications to the state\n# of an object. The exceptional situations that will be required to be handled\n# by clients to the object.\n\nIf the objects are fully encapsulated then the protocol will describe the only\nway in which objects may be accessed by other objects.\n\nSome programming languages directly support protocols or interfaces (Ada, C#, D,\nDart, Delphi, Java, Logtalk, Object Pascal, Objective-C, PHP, Racket). Older\nlanguages may also have features that can support the interface concept, such as\nabstract base classes with pure virtual functions in C++, or object-oriented\nfeatures in Perl.\n\nAlthough the Go programming language is not generally considered an object-\noriented language, it does allow methods to be defined on user-defined types. Go\nhas \"interface\" types that are compatible with any type that supports a given\nset of methods (the type does not need to explicitly implement the interface).\nThe empty interface, interface{} , is compatible with all types.\n\nNote that functional programming and distributed programming languages have a\nconcept which is also called a protocol, but whose meaning is subtly different\n(i.e. a specification of allowed exchanges of messages, emphasis on exchanges,\nnot on messages). This difference is due to somewhat different assumptions of\nfunctional programming and object-oriented programming paradigms. In particular,\nthe following are also considered as part of a protocol in these languages:\n\n# The allowed sequences of messages, Restrictions placed on either participant\n# in the communication, Expected effects that will occur as the message is\n# handled.\n","linknr":183,"url":"Interface_(object-oriented_programming)","recorded":1362667814,"links":13,"instances":["computer_science","programming_language","programming_language","programming_language","computer_science","programming_language","programming_language","computer_science","programming_language","programming_language","computer_science","programming","computer_science"],"pdf":[],"categories":["Object-oriented programming"],"headings":["See also","References"],"image":["//upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["object","computer_science"],["method","computer_science"],["java","programming_language"],["invariant","computer_science"],["encapsulation","object-oriented_programming"],["ada","programming_language"],["c_sharp","programming_language"],["d","programming_language"],["dart","programming_language"],["java","programming_language"],["racket","programming_language"],["go","programming_language"],["delegation","programming"],["class","computer_science"],["encapsulation","computer_science"]],"members":["object","java","d","go","invariant","racket","dart","encapsulation","ada","c_sharp","class","delegation","method"],"related":["Object-oriented_programming","Object_(computer_science)","Communication","Method_(computer_science)","Java_(programming_language)","Invariant_(computer_science)","Encapsulation_(object-oriented_programming)","Programming_language","Ada_(programming_language)","C_Sharp_(programming_language)","D_(programming_language)","Dart_(programming_language)","Embarcadero_Delphi","Java_(programming_language)","Logtalk","Object_Pascal","Objective-C","PHP","Racket_(programming_language)","Virtual_function","C++","Perl","Go_(programming_language)","Functional_programming","Distributed_programming","Delegation_(programming)","Class_(computer_science)","Encapsulation_(computer_science)","Public_interface","Private_interface","List_of_basic_computer_science_topics","Application_programming_interface"]}