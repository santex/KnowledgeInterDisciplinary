{"cursor":"4066","size":15,"audio":[],"currentlang":"en","article":"\n\nIn compiler theory, an 'intrinsic function' is a function available for use in a\ngiven programming language whose implementation is handled specially by the\ncompiler. Typically, it substitutes a sequence of automatically generated\ninstructions for the original function call, similar to an inline function.\nUnlike an inline function though, the compiler has an intimate knowledge of the\nintrinsic function and can therefore better integrate it and optimize it for the\nsituation. This is also called builtin function in many languages.\n\nCompilers that implement intrinsic functions generally enable them only when the\nuser has requested optimization, falling back to a default implementation\nprovided by the language runtime environment otherwise.\n\nIntrinsic functions are often used to explicitly implement vectorization and\nparallelization in languages which do not address such constructs. Altivec and\nOpenMP are examples of APIs which use intrinsic functions to declare,\nrespectively, vectorizable and multiprocessor-aware operations during\ncompilation. The compiler parses the intrinsic functions and converts them into\nvector math or multiprocessing object code appropriate for the target platform.\n\nMicrosoft {{cite web\n  | url = http://msdn.Microsoft.com/en-us/library/26td21ds title = Compiler\n  | Intrinsics publisher = Microsoft author = MSDN (VS2010) accessdate =\n  | 2012-06-20}}\n and Intel's C/C++ compilers as well as GCC {{cite web\n  | url = http://gcc.gnu.org/onlinedocs/gcc/Target-Builtins.html title = Built-\n  | in Functions Specific to Particular Target Machines publisher = Free\n  | Software Foundation author = GCC documentation accessdate = 2012-06-20}}\n implement intrinsics that map directly to the x86 SIMD instructions (MMX,\nSSE, SSE2, SSE3, SSSE3, SSE4). In the latest version of the Microsoft Visual\nStudio (VS2012), the Visual C++ compiler does not support inline assembler for\nX86-64 {{cite web\n  | url = http://msdn.microsoft.com/en-us/library/wbk4z78b.aspx?ppud=4 title =\n  | Intrinsics and Inline Assembly publisher = Microsoft author = MSDN (VS2012)\n  | accessdate = 2010-04-16}}\n (neither do VS2010 {{cite web\n  | url = http://msdn.microsoft.com/en-us/library/wbk4z78b(v=vs.100).aspx title\n  | = Intrinsics and Inline Assembly publisher = Microsoft author = MSDN\n  | (VS2010) accessdate = 2011-09-28}}\n, VS2008 {{cite web\n  | url = http://msdn.microsoft.com/en-us/library/wbk4z78b(v=VS.90).aspx title =\n  | Intrinsics and Inline Assembly publisher = Microsoft author = MSDN (VS2008)\n  | accessdate = 2011-09-28}}\n, VS2005 {{cite web\n  | url = http://msdn.microsoft.com/en-us/library/wbk4z78b(v=VS.80).aspx title =\n  | Intrinsics and Inline Assembly publisher = Microsoft author = MSDN (VS2005)\n  | accessdate = 2011-09-28}}\n). To compensate for the lack of inline assembly, new intrinsics have been\nadded that map to standard assembly instructions that are not normally\naccessible through C/C++ (e.g.: bit scan).\n","linknr":150,"url":"Intrinsic_function","recorded":1362564767,"links":17,"instances":["instruction_set","parallel_computing"],"pdf":[],"categories":["Compiler construction"],"headings":["References"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/2/28/HelloWorld.svg/50px-HelloWorld.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["vectorization","parallel_computing"],["mmx","instruction_set"]],"members":["mmx","vectorization"],"related":["Compiler_theory","Programming_language","Inline_function","Compiler_optimizations","Vectorization_(parallel_computing)","Parallel_processing","Altivec","OpenMP","API","Multiprocessor","Object_code","Microsoft","Microsoft_Developer_Network","GNU_Compiler_Collection","Free_Software_Foundation","SIMD","MMX_(instruction_set)","Streaming_SIMD_Extensions","SSE2","SSE3","SSSE3","SSE4","Microsoft_Visual_Studio","Visual_C%2B%2B","X86-64","Microsoft","Microsoft_Developer_Network","Microsoft","Microsoft_Developer_Network","Microsoft","Microsoft_Developer_Network","Microsoft","Microsoft_Developer_Network"]}