{"cursor":"18687","size":15,"audio":[],"currentlang":"en","article":"\n\n\n\n'Dependency injection' is a software design pattern that allows removing hard-\ncoded dependencies and making it possible to change them, whether at run-time or\ncompile-time. Niko Schwarz, Mircea Lungu, Oscar Nierstrasz, âSeuss:\nDecoupling responsibilities from static methods for fine-grained\nconfigurabilityâ, Journal of Object Technology, Volume 11, no. 1 (April 2012),\npp. 3:1-23, [http://dx.doi.org/10.5381/jot.2012.11.1.a3\ndoi:10.5381/jot.2012.11.1.a3].\n\nThis can be used, for example, as a simple way to load plugins dynamically or to\nchoose stubs or mock objects in test environments vs. real objects in production\nenvironments. This software design pattern injects the depended-on element\n(object or value etc) to the destination automatically by knowing the\nrequirement of the destination. Another pattern, called dependency lookup, is a\nregular process and reverse process to dependency injection.\n\nOne of its core principles is the separation of behavior from dependency\nresolution.\n","linknr":220,"url":"Dependency_injection","recorded":1362891839,"links":27,"instances":["computing","programming_language","programming","computer_programming"],"pdf":[],"categories":["Component-based software engineering","Software architecture","Software design patterns"],"headings":["Definition","Motivation","Basics","Code illustration using Java","Benefits","Types","Frameworks that support dependency injection","See also","References","External links"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png","//upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["coupling","computer_programming"],["plug-in","computing"],["interface","object-oriented_programming"],["class","computer_programming#abstract_and_concrete"],["delegation","programming#language_feature"],["java","programming_language"],["delegation","programming"],["plug-in","computing"]],"members":["java","interface","delegation","class","coupling"],"related":["Software_design_pattern","Coupling_(computer_programming)","Plug-in_(computing)","Method_stub","Mock_object","Software_design_pattern","Interface_(object-oriented_programming)","Software_development","Software_component","Software_service","Unit_testing","Software_systems","Online","Spring_Framework","Guice","Managed_Extensibility_Framework","Java_(programming_language)","Delegation_(programming)","Web_container","XML","Metadata","Boilerplate_code","Unit_testing","Method_stub","Martin_Fowler","Spring_Framework","Google_Guice","Managed_Extensibility_Framework","AngularJS","Zend_Framework","TYPO3_Flow","Symfony","Architecture_description_language","Factory_pattern","Strategy_pattern","Plug-in_(computing)","Inversion_of_control","Dr._Dobb's_Journal","Andrew_McVeigh"]}