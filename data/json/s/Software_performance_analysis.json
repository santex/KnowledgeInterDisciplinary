{"cursor":"14326","size":15,"audio":[],"currentlang":"en","article":"\nIn software engineering, 'profiling' (\"program profiling\", \"software profiling\")\nis a form of dynamic program analysis that measures, for example, the space\n(memory) or time complexity of a program, the usage of particular instructions,\nor frequency and duration of function calls. The most common use of profiling\ninformation is to aid program optimization.\n\nProfiling is achieved by instrumenting either the program source code or its\nbinary executable form using a tool called a profiler (or code profiler). A\nnumber of different techniques may be used by profilers, such as event-based,\nstatistical, instrumented, and simulation methods.\n","linknr":237,"url":"Software_performance_analysis","recorded":1362675886,"links":31,"instances":["computer_program","programming_language","computer_science","programming_language","programming_language","statistics","computer_programming","computing"],"pdf":["http://docs.freebsd.org/44doc/psd/18.gprof/paper.pdf","http://www.ece.cmu.edu/~ece548/tools/atom/man/wrl_94_2.pdf","http://software.intel.com/sites/products/documentation/hpc/vtune/windows/jit_profiling.pdf"],"categories":["Software optimization","Profilers|*"],"headings":["Gathering program events","Use of profilers","History","Profiler types based on output","Data granularity in profiler types","See also","References","External links"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/0/08/CodeAnalyst3.png/220px-CodeAnalyst3.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/commons/thumb/a/ad/SunPerfAnalyzer.png/220px-SunPerfAnalyzer.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//upload.wikimedia.org/wikipedia/en/thumb/f/fd/Portal-puzzle.svg/32px-Portal-puzzle.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["optimization","computer_science"],["instrumentation","computer_programming"],["sampling","statistics"],["instrumentation","computer_programming"],["java","programming_language"],["python","programming_language"],["ruby","programming_language"],["sampling","statistics"],["pin","computer_program"],["simon","batch_interactive_test/debug"],["ibm_oliver","cics_interactive_test/debug"],["benchmark","computing"]],"members":["pin","python","optimization","java","ruby","simon","sampling","instrumentation","ibm_oliver","benchmark"],"related":["Software_engineering","Dynamic_program_analysis","Computational_complexity_theory","Instruction_set_simulator","Optimization_(computer_science)","Source_code","Hardware_interrupt","Instrumentation_(computer_programming)","Instruction_set_simulator","Hooking","Hardware_performance_counter","Performance_engineering","Computer_architecture","Compiler","Instruction_scheduling","Branch_prediction","Instruction_path_length","Hypervisor","IBM/360","IBM/370","Program_status_word","Sampling_(statistics)","Instruction_Set_Simulator","Call_graph","Digital_Equipment_Corporation","Compile_time","Instrumentation_(computer_programming)","Conference_on_Programming_Language_Design_and_Implementation","Call_graph","Java_(programming_language)","Java_Virtual_Machine_Tools_Interface",".NET_Framework","Interpreter","Python_(programming_language)","Ruby_(programming_language)","Sampling_(statistics)","Program_counter","Operating_system","Interrupt","System_call","Program_counter","AMD","CodeAnalyst","Apple_Inc.","Oprofile","Intel","VTune","Intel_Parallel_Studio","Instrumenting","Heisenbug","Machine_instruction","API","Application_Response_Measurement","Parasoft","Insure++","Executable","Pin_(Computer_Program)","Valgrind","DynamoRIO","DynInst","Bytecode","Control_table","JIT","Hypervisor","SIMMON","Instruction_Set_Simulator","SIMON_(Batch_Interactive_test/debug)","IBM_OLIVER_(CICS_interactive_test/debug)","Algorithmic_efficiency","Static_code_analysis","Benchmark_(computing)","List_of_performance_analysis_tools","Performance_engineering","Performance_prediction","Performance_Application_Programming_Interface","Performance_tuning","Worst-case_execution_time","Java_performance","Software_archaeology","Dr._Dobb's_Journal","IBM_Rational_Application_Developer"]}