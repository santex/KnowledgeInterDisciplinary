{"cursor":"12216","size":15,"audio":[],"currentlang":"en","article":" 'Machine code' or 'machine language'\nis a system of largely impartible instructions executed directly by a computer's\ncentral processing unit (CPU). Each instruction performs a very specific task,\nsuch as a load, a jump, or an ALU operation on a unit of data in a CPU register\nor memory. Every program directly executed by a CPU is made up of a series of\nsuch instructions.\n\nNumerical machine code (i.e. not assembly code) may be regarded as the lowest-\nlevel representation of a compiled and/or assembled computer program or as a\nprimitive and hardware-dependent programming language. While it is possible to\nwrite programs directly in numerical machine code, it is tedious and error prone\nto manage individual bits and calculate numerical addresses and constants\nmanually. It is therefore rarely done today, except for situations that require\nrather extreme optimization or debugging.\n\nAlmost all practical programs today are written in higher-level languages or\nassembly language, and translated to executable machine code by a compiler\nand/or assembler and linker. Programs in interpreted languages Often BASIC,\nMATLAB, Smalltalk, Python, Ruby, etc. are 'not' translated into machine\ncode, however, although their [[interpreter (computing)|interpreter]] (which may\nbe seen as an executor or processor) typically consists of directly executable\nmachine code (generated from assembly and/or high level language source code).\n\nMachine code should not be confused with so-called \"bytecode\" (or the older term\np-code), which is either executed by an interpreter or itself compiled into\nmachine code for faster (direct) execution. Machine code and assembly code is\nsometimes called [[native (computing)|native]] code when referring to platform-\ndependent parts of language features or libraries.\n","linknr":309,"url":"Machine_code","recorded":1362671086,"links":68,"instances":["programming_language","computing","programming_language","computer_science","computer_science","computing","computing","computer_science","computing","scientist"],"pdf":[],"categories":["Assembly languages|*","Machine code|*"],"headings":["Machine code instructions","Programs","Assembly languages","Example","Relationship to microcode","Storing in memory","Readability by humans","See also","Further reading","Notes and references"],"image":["//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/37px-Wiktionary-logo-en.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/37px-Wiktionary-logo-en.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["instruction","computer_science"],["assembler","computing"],["linker","computing"],["python","programming_language"],["ruby","programming_language"],["branch","computer_science"],["data","computing"],["process","computing"],["thread","computer_science"],["david_a._patterson","scientist"]],"members":["python","data","ruby","instruction","branch","process","assembler","thread","linker"],"related":["Instruction_(computer_science)","Computer","Central_processing_unit","Jump_instruction","Arithmetic_logic_unit","CPU","Assembly_code","Compiled","Assembly_language","Computer_program","Computer_hardware","Programming_language","Assembly_language","Compiler","Assembler_(computing)","Linker_(computing)","Interpreted_language","BASIC","MATLAB","Smalltalk","Python_(programming_language)","Ruby_(programming_language)","Bytecode","Microsoft_P-Code","Instruction_set","Bit","Operating_systems","Peripheral","Opcode","Branch_(computer_science)","Operand","Addressing_mode","Superscalar","Program_flow","Conditional_branch","Assembly_language","Zilog_Z80","Processor_register","MIPS_architecture","Computer_architecture","Microprogram","Dataflow","Porting","System/360","Emulator","IBM_1400_series","Harvard_architecture","Data_(computing)","Modified_Harvard_architecture","Executable","Data_storage_device","Von_Neumann_architecture","Process_(computing)","Virtual_address_space","Computer_multitasking","Code_segment","Shared_libraries","Thread_(computer_science)","Context_switching","Copyright_Office","Douglas_Hofstadter","Genetic_code","DNA","Assembly_language","Endianness","Machine_code_monitor","Overhead_code","P-code_machine","Reduced_Instruction_Set_Computer","VLIW","Microprofessor_I","David_A._Patterson_(scientist)"]}