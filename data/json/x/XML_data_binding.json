{"cursor":"3568","size":15,"audio":[],"currentlang":"en","article":"'XML data binding' refers to a means of representing information in an XML\ndocument as a business object in computer memory. This allows applications to\naccess the data in the XML from the object rather than using the DOM or SAX to\nretrieve the data from a direct representation of the XML itself.\n\nAn XML data binder accomplishes this by automatically creating a mapping between\nelements of the XML schema of the document we wish to bind and members of a\nclass to be represented in memory.\n\nWhen this process is applied to convert an XML document to an object, it is\ncalled unmarshalling. The reverse process, to serialize an object as XML, is\ncalled marshalling.\n\nSince XML is inherently sequential and objects are (usually) not, XML data\nbinding mappings often have difficulty preserving all the information in an XML\ndocument. Specifically, information like comments, XML entity references, and\nsibling order may fail to be preserved in the object representation created by\nthe binding application. This is not always the case; sufficiently complex data\nbinders are capable of preserving 100% of the information in an XML document.\n\nSimilarly, since objects in computer memory are not inherently sequential, and\nmay include links to other objects (including self-referential links), XML data\nbinding mappings often have difficulty preserving all the information about an\nobject when it is marshalled to XML.\n\nAn alternative approach to automatic data binding relies instead on hand-\ncrafted XPath expressions that extract the data from XML. This approach has a\nnumber of benefits. First, the data binding code only needs proximate\nknowledge (e.g., topology, tag names, etc.) of the XML tree structure, which\ndevelopers can determine by looking at the XML data; XML schemas are no longer\nmandatory. Furthermore, XPath allows the application to bind the relevant data\nitems and filter out everything else, avoiding the unnecessary processing that\nwould be required to completely unmarshall the entire XML document. The\ndrawback of this approach is the lack of automation in implementing the object\nmodel and XPath expressions. Instead the application developers have to create\nthese artifacts manually.\n","linknr":99,"url":"XML_data_binding","recorded":1362371625,"links":11,"instances":["computer_science","programming_language","computer_science"],"pdf":[],"categories":["XML"],"headings":["Data binding in general","External links","See also"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["class","computer_science"],["marshalling","computer_science"],["c","programming_language"]],"members":["marshalling","c","class"],"related":["XML","Business_object","Application_software","Document_Object_Model","Simple_API_for_XML","XML_schema","Instance_variable","Class_(computer_science)","Serialization","Marshalling_(computer_science)","Comment","XPath","Serialization","C_(programming_language)","Perl","Mathematica","YAML","JSON","Bound_control","Data_structure","Java_Architecture_for_XML_Binding","JiBX","JSON","LDX+","Serialization","YAML"]}