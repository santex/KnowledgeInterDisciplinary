{"cursor":"27025","size":15,"audio":[],"currentlang":"en","article":"In computer science, 'denotational semantics' (initially known as 'mathematical\nsemantics' or 'ScottâStrachey semantics') is an approach of formalizing the\nmeanings of programming languages by constructing mathematical objects (called\ndenotations) which describe the meanings of expressions from the languages.\nOther approaches to providing a formal semantics of programming languages\ninclude axiomatic semantics and operational semantics.\n\nBroadly speaking, denotational semantics is concerned with finding mathematical\nobjects called domains that represent what programs do. For example, programs\n(or program phrases) might be represented by partial functions, or by Actor\nevent diagram scenarios, or by games between the environment and the system:\nthese are all general examples of domains.\n\nAn important tenet of denotational semantics is that semantics should be\n[[Principle of compositionality|compositional]]: the denotation of a program\nphrase should be built out of the denotations of its subphrases.\n","linknr":311,"url":"Denotational_semantics","recorded":1362676844,"links":26,"instances":["computer_science","computer_scientist","mathematics","computing","computing","mathematics","computer_science","programming_language","functional_programming","mathematics"],"pdf":["https://blog.itu.dk/SMDS-F2010/files/2010/04/milner-2009-the-space-and-motion-of-communicating-agents.pdf","http://www.cs.bham.ac.uk/~axj/pub/papers/handy1.pdf","http://www.cl.cam.ac.uk/~gw104/dens.pdf","http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-194.pdf"],"categories":["1970 in computer science","Logic in computer science","Models of computation","Formal specification languages","Denotational semantics|","Programming language semantics"],"headings":["Historical development","Abstraction","Compositionality","Semantics versus implementation","Connections to other areas of computer science","References","Further reading","External links"],"image":["//upload.wikimedia.org/math/5/8/b/58b7ab50279427dd0d72bef1ac10407d.png","//upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["function","mathematics"],["haskell","programming_language"],["interpreter","computing"],["object","computer_science"],["abort","computing"],["concurrency","computer_science"],["concurrency","computer_science#models"],["category","mathematics"],["category","mathematics"],["polymorphism","computer_science"],["constructivism","mathematics"],["category","mathematics"],["monad","functional_programming"],["henry_baker","computer_scientist"]],"members":["object","henry_baker","constructivism","abort","interpreter","function","polymorphism","concurrency","haskell","monad","category"],"related":["Computer_science","Programming_language","Formal_semantics_of_programming_languages","Axiomatic_semantics","Operational_semantics","Domain_theory","Partial_function","Actor_model","Denotational_semantics_of_the_Actor_model","Phrase","Christopher_Strachey","Dana_Scott","Function_(mathematics)","Dana_Scott","Christopher_Strachey","Recursion","Scott_continuity","Domain_theory","Complete_partial_order","Concurrent_computing","Exception_handling","Concurrent_ML","Communicating_sequential_processes","A._W._Roscoe","Haskell_(programming_language)","Simon_Peyton_Jones","Tony_Hoare","Applicative_programming_language","Interpreter_(computing)","Concurrent_computing","Object_(computer_science)","Exception_handling","Abort_(computing)","Ordered_pair","Factorial","Iterated_function","Power_domains","Nondeterministic_algorithm","Unbounded_nondeterminism","Concurrency_(computer_science)","Petri_nets","Communicating_sequential_processes","C._A._R._Hoare","Willem-Paul_de_Roever","Profunctor","Glynn_Winskel","Imperative_programming","Functor","Category_(mathematics)","Category_(mathematics)","Natural_transformation","Peter_W._O'Hearn","Robert_D._Tennent","Syracuse_University","Recursive_data_type","Untyped_lambda_calculus","Polymorphism_(computer_science)","Linear_logic","Proof_net","Coherent_space","Programming_language_for_Computable_Functions","Parallel-or","Game_semantics","Logical_relation","Process_calculus","Internal_language","Operational_semantics","Observational_equivalence","Observational_equivalence","Actor_model","Process_calculi","Constructivism_(mathematics)","Gordon_Plotkin","Category_(mathematics)","Game_semantics","Category_of_sets","Kleisli_category","Functor_category","Robin_Milner","Dana_Scott","Domain_theory","Model_theory","Type_theory","Category_theory","Abstract_interpretation","Program_verification","Model_checking","Functional_programming","Monad_(functional_programming)","Joe_Stoy","Sanson_Abramsky","Gordon_Plotkin","Edsger_Dijkstra","Carl_Hewitt","Henry_Baker_(computer_scientist)","Robin_Milner","C._A._R._Hoare","Nancy_Lynch","Michael_J._Fischer","Ralph-Johan_Back","ICALP","He_Jifeng","C._A._R._Hoare","Andrew_D._Gordon","Bill_Roscoe"]}