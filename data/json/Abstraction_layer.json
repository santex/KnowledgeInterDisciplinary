{"cursor":"5509","size":15,"audio":[],"currentlang":"en","article":"\n\n as a series of abstraction layers: hardware, firmware, assembler, kernel,\n operating system and applications (see also ).]]\n\nAn 'abstraction layer' (or abstraction level, or a layer of abstraction) is a\nway of hiding the implementation details of a particular set of functionality.\nSoftware models that use layers of abstraction include the OSI 7-layer model for\ncomputer network protocols, the OpenGL graphics drawing library, and the byte\nstream input/output (I/O) model originated by Unix and adopted by MSDOS, Linux,\nand most other modern operating systems.\n\nIn the Unix operating system, most types of input and output operations are\nconsidered to be streams of bytes read from a device or written to a device.\nThis stream of bytes model is used for file I/O, socket I/O, and terminal I/O in\norder to provide device independence. In order to read and write to a device at\nthe application level, the program calls a function to open the device which may\nbe a real device such as a terminal or a virtual device such as a network port\nor a file in a file system. The device's physical characteristics are mediated\nby the operating system which in turn presents an abstract interface that allows\nthe programmer to read and write bytes from/to the device. The operating system\nthen performs the actual transformation needed to read and write the stream of\nbytes to the device.\n\nMost graphics libraries such as OpenGL provide an abstract graphical device\nmodel as an interface. The library is responsible for translating the commands\nprovided by the programmer into the specific device commands needed to draw the\ngraphical elements and objects. The specific device commands for a plotter are\ndifferent from the device commands for a CRT monitor but the graphics library\nhides the implementation and device dependent details by providing an abstract\ninterface which provides a set of primitives that are generally useful for\ndrawing graphical objects.\n\nIn computer science, an abstraction level is a generalization of a model or\nalgorithm, away from any specific implementation. These generalizations arise\nfrom broad similarities that are best encapsulated by models that express\nsimilarities present in various specific implementations. The simplification\nprovided by a good abstraction layer allows for easy reuse by distilling a\nuseful concept or metaphor so that situations where it may be accurately applied\ncan be quickly recognized.\n\nA good abstraction will generalize that which can be made abstract; while\nallowing specificity where the abstraction breaks down and its successful\napplication requires customization to each unique requirement or problem.\n\nFrequently abstraction layers can be composed into a hierarchy of abstraction\nlevels. The ISO-OSI networking model comprises seven abstraction layers. Each\nlayer of the OSI ISO networking model encapsulates and addresses a different\npart of the needs of much digital communications, thereby reducing the\ncomplexity of the associated engineering solutions.\n\nA famous aphorism of David Wheeler goes: All problems in computer science can be\nsolved by another level of indirection; Diomidis Spinellis.\n[http://www.dmst.aueb.gr/dds/pubs/inbook/beautiful_code/html/Spi07g.html Another\nlevel of indirection]. In Andy Oram and Greg Wilson, editors, Beautiful Code:\nLeading Programmers Explain How They Think, chapter 17, pages 279â€“291.\nO'Reilly and Associates, Sebastopol, CA, 2007.  this is often deliberately\nmis-quoted with \"abstraction\" substituted for \"indirection\". Kevlin Henney's\ncorollary to this is, \"...except for the problem of too many layers of\nindirection.\"\n","linknr":153,"url":"Abstraction_layer","recorded":1362672775,"links":22,"instances":["computing","computer_science","computer_science","computing","computer_science","computer_science","software","computer_science","computer_scientist"],"pdf":[],"categories":["Computer architecture"],"headings":["Computer architecture","References","See also"],"image":["//upload.wikimedia.org/wikipedia/commons/thumb/0/03/Computer_abstraction_layers.svg/200px-Computer_abstraction_layers.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/magnify-clip.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["kernel","computer_science"],["process","computing"],["abstraction","computer_science"],["protocol","computing"],["computer_port","software"],["abstraction","computer_science"],["interface","computer_science"],["library","computer_science"],["primitive","computer_science"],["david_wheeler","computer_scientist"],["process","computing"],["layer","object-oriented_design"],["abstraction","computer_science"],["transparency","disambiguation#computing_and_mathematics"]],"members":["transparency","protocol","primitive","library","process","abstraction","layer","kernel","computer_port","interface","david_wheeler"],"related":["Computer_hardware","Firmware","Assembly_language","Kernel_(computer_science)","Operating_system","Process_(computing)","Abstraction_(computer_science)","OSI_model","Computer_network","Protocol_(computing)","OpenGL","Byte_stream","Unix","MSDOS","Linux","Operating_system","Computer_hardware","Computer_file","Internet_socket","Text_terminal","Device_Independence","Virtual_device","Computer_port_(software)","File_system","Abstraction_(computer_science)","Interface_(computer_science)","Programmer","Byte","Program_transformation","Library_(computer_science)","Plotter","Cathode_ray_tube","Computer_display","Primitive_(computer_science)","Computer_science","Algorithm","OSI_model","Aphorism","David_Wheeler_(computer_scientist)","Kevlin_Henney","Computer_architecture","Computer_hardware","Hardware_abstraction","Firmware","Assembly_language","Operating_system","Process_(computing)","Layer_(object-oriented_design)","Information_hiding","Abstraction_(computer_science)","Protection_ring","Application_programming_interface","Software","Software_engineering","Database"]}