{"cursor":"7318","size":15,"audio":[],"currentlang":"en","article":"\nIn the area of mathematical logic and computer science known as type theory, a\n'kind' is the type of a type constructor or, less commonly, the type of a higher-\norder type operator. A kind system is essentially a simply typed lambda calculus\n\"one level up\", endowed with a primitive type, denoted * and called\n\"type\", which is the kind of any (monomorphic) data type.\n\n\nA kind is sometimes confusingly described as the \"type of a (data) type\", but\nthis is a triviality, unless one considers polymorphic types to be data types.\nSyntactically, it is natural to consider polymorphic types to be type\nconstructors, thus monomorphic types to be nullary type constructors. But all\nnullary constructors, thus all monomorphic types, have the same, simplest kind;\nnamely * .\n\nSince higher-order type operators are uncommon in programming languages, in most\nprogramming practice, kinds are used to distinguish between data types and the\ntypes of constructors which are used to implement parametric polymorphism. Kinds\nappear, either explicitly or implicitly, in languages with complex type systems, such\nas Haskell and Scala. [http://adriaanm.github.com/files/higher.pdf Generic of a\nHigher Kind]\n","linknr":226,"url":"Kind_(type_theory)","recorded":1362551589,"links":12,"instances":["programming_language","programming_language"],"pdf":["http://adriaanm.github.com/files/higher.pdf"],"categories":["Type theory","Data types"],"headings":["Examples","Kinds in Haskell","See also","References"],"image":["//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/9/8/b/98bece032e2eeade4a2be8fff640c47c.png","//upload.wikimedia.org/math/1/c/0/1c0e515c39b175f124444e9574cba698.png","//upload.wikimedia.org/math/b/9/6/b967e9117c1c955f6a066f687d7f8831.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/4/6/7/467efd4fc50d705194feb083f28991c6.png","//upload.wikimedia.org/math/d/e/8/de83b4778b8582d6b501555da17bd8e7.png","//upload.wikimedia.org/math/5/6/5/565916fdc4f0364b33ce9c7f270984a2.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/9/8/b/98bece032e2eeade4a2be8fff640c47c.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/1/c/0/1c0e515c39b175f124444e9574cba698.png","//upload.wikimedia.org/math/2/8/6/286258c734cf3cd261609789f3898fe5.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/9/8/b/98bece032e2eeade4a2be8fff640c47c.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/9/8/b/98bece032e2eeade4a2be8fff640c47c.png","//upload.wikimedia.org/math/3/3/8/3389dae361af79b04c9c8e7057f60cc6.png","//upload.wikimedia.org/math/5/0/2/5026a66786533eb997b83d213f51b87d.png","//bits.wikimedia.org/static-1.21wmf9/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf9/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["haskell","programming_language"],["scala","programming_language"],["haskell","programming_language"]],"members":["haskell","scala"],"related":["Mathematical_logic","Computer_science","Type_theory","Type_constructor","Higher-order_type_operator","Simply_typed_lambda_calculus","Parametric_polymorphism","Data_type","Data_type","Trivia","Parametric_polymorphism","Nullary","Programming_language","Parametric_polymorphism","Haskell_(programming_language)","Scala_(programming_language)","Data_type","Nullary","Functional_programming_language","Unary","Type_constructor","List_type","Currying","Pair_type","Function_type","Haskell_(programming_language)","Data_type","Unary","Type_constructor","Type_class","Partial_application","Tuple","Polymorphic_kind","Parametric_polymorphism","System_F-omega","Pure_type_system"]}