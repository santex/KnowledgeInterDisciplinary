{"cursor":"8872","size":15,"audio":[],"currentlang":"en","article":"\n\n\n\n\nIn the context of hardware and software systems, 'formal verification' is the\nact of proving or disproving the correctness of intended algorithms underlying a\nsystem with respect to a certain formal specification or property, using formal\nmethods of mathematics.\n\nFormal verification can be helpful in proving the correctness of systems such\nas: cryptographic protocols, combinational circuits, digital circuits with\ninternal memory, and software expressed as source code.\n\nThe verification of these systems is done by providing a formal proof on an\nabstract mathematical model of the system, the correspondence between the\nmathematical model and the nature of the system being otherwise known by\nconstruction. Examples of mathematical objects often used to model systems are:\nfinite state machines, labelled transition systems, Petri nets, timed automata,\nhybrid automata, process algebra, formal semantics of programming languages\nsuch as operational semantics, denotational semantics, axiomatic semantics and\nHoare logic.\n","linknr":215,"url":"Formal_verification","recorded":1362568895,"links":35,"instances":["operating_system","theorem_prover","computer_science"],"pdf":["http://www.cl.cam.ac.uk/~jrh13/slides/types-04sep99/slides1.pdf","http://www.cl.cam.ac.uk/~jrh13/slides/types-04sep99/slides1.pdf","http://www-wjp.cs.uni-saarland.de/publikationen/Ba10EW.pdf"],"categories":["Electronic circuit verification","Formal methods","Logic in computer science","Theoretical computer science"],"headings":["Approaches to formal verification","Verification and validation","Industry use","See also","References"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//upload.wikimedia.org/wikipedia/en/thumb/f/fd/Portal-puzzle.svg/32px-Portal-puzzle.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/37px-Wiktionary-logo-en.svg.png","//bits.wikimedia.org/static-1.21wmf9/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf9/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["correctness","computer_science"],["isabelle","theorem_prover"],["integrity","operating_system"]],"members":["integrity","isabelle","correctness"],"related":["Software_system","Mathematical_proof","Correctness_(computer_science)","Algorithms","Formal_specification","Formal_methods","Mathematics","Cryptographic_protocol","Combinational_logic","Digital_circuit","Formal_proof","Mathematical_model","Finite_state_machine","Labelled_transition_system","Petri_net","Timed_automaton","Hybrid_automata","Process_algebra","Operational_semantics","Denotational_semantics","Axiomatic_semantics","Hoare_logic","Model_checking","Finite_model_theory","State_space_enumeration","Abstract_interpretation","Symbolic_simulation","Abstraction_refinement","Temporal_logic","Linear_temporal_logic","Computational_tree_logic","HOL_theorem_prover","ACL2","Isabelle_(theorem_prover)","Coq","Program_derivation","Functional_programming","Bird-Meertens_Formalism","Correct_by_construction","Dependent_types","Program_derivation","Functional_programming","Bird-Meertens_Formalism","Correct_by_construction","Verification_and_validation","Verification_and_validation","Use_case","Hardware_industry","Software_industry","SeL4","ORIENTAIS","East_China_Normal_University","Integrity_(operating_system)","SYSGO","PikeOS","Automated_theorem_proving","Formal_equivalence_checking","LURCH","Proof_checker","Property_Specification_Language","Static_code_analysis","Temporal_logic_in_finite-state_verification","Post_silicon_validation","Intelligent_verification","Runtime_verification"]}