{"cursor":"6784","size":15,"audio":[],"currentlang":"en","article":"In computer science, a 'termination analysis' is program analysis which attempts\nto determine whether the evaluation of a given program will definitely\nterminate. Because the halting problem is undecidable, termination analysis\ncannot work correctly in all cases. The aim is to find the answer \"program does\nterminate\" (or \"program does not terminate\") whenever this is possible. Without\nsuccess the algorithm (or human) working on the termination analysis may answer\nwith \"maybe\" or continue working infinitely long.\n","linknr":122,"url":"Termination_analysis","recorded":1362486649,"links":11,"instances":["mathematics","computer_science"],"pdf":["http://verify.rwth-aachen.de/giesl/papers/lopstr07-distribute.pdf"],"categories":["Static program analysis"],"headings":["Termination proof","Example","Current Research","See also","References","External links"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["recursion","computer_science"],["pathological","mathematics"]],"members":["pathological","recursion"],"related":["Computer_science","Program_analysis","Computer_program","Halting_problem","Undecidable","Mathematical_proof","Formal_verification","Total_correctness","Algorithm","Well-founded_relation","Ordinal_number","Infinite_descending_chains","Programming_language","Program_loop","Counter","Data_processing","Algorithm","Pseudocode","Programmer","Arithmetic_overflow","Recursion_(computer_science)","Pathological_(mathematics)","Function_argument","Factorial","Well-ordering_property","Natural_number","Return_value","Loop_variant"]}