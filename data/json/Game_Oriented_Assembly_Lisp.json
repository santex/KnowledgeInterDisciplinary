{"cursor":"3829","size":15,"audio":[],"currentlang":"en","article":"'Game Oriented Assembly Lisp' (or 'GOAL') is a video game programming language\ndeveloped by Andy Gavin and the [[Jak and Daxter]] team at Naughty Dog. It was\nwritten using Allegro Common Lisp and used in the development of the entire\n[[Jak and Daxter]] series of games.\n\nSyntactically GOAL resembles Scheme, though with many idiosyncratic features\nsuch as classes, inheritance, and virtual functions. [http://web.-\narchive.org/web/20070412155710/http://lists.midnightryder.com/pipermail/sweng-\ngamedev-midnightryder.com/2005-August/003804.html An example of what GOAL code\nlooks like can be found at] GOAL encourages an imperative programming\nstyle: programs tend to consist of a sequence of events to be executed rather\nthan the functional programming style of functions to be evaluated recursively.\nThis is a diversion from Scheme, which allows such side-effects but does not\nencourage imperative style.\n\nGOAL does not run in an interpreter, but instead is compiled directly into\nPlayStation 2 machine code for execution. It offers limited facilities for\ngarbage collection, relying extensively on runtime support. It offers dynamic\nmemory allocation primitives designed to make it well-suited to running in\nconstant memory on a video game console. GOAL has extensive support for\ninlined assembly code using a special rlet form,\nallowing programmers to freely mix assembly and higher-level constructs within\nthe same function.\n\nThe GOAL compiler is implemented in Allegro Common Lisp. It supports a long term\ncompiling listener session which gives the compiler knowledge about the state of\nthe compiled and therefore running program, including the symbol table. This, in\naddition to dynamic linking, allows a function to be edited, recompiled,\nuploaded, and inserted into a running game without having to restart. The\nprocess is similar to the \"edit and continue\" feature offered by some C++\ncompilers, but allows the programmer to replace arbitrary amounts of code (even\nup to entire object files), and does not interrupt the running game with the\ndebugger. This feature was used to implement code as well as level streaming in\nthe [[Jak and Daxter]] games.\n\nGOAL's first use was for the [[Jak and Daxter: The Precursor Legacy]] game. The\npredecessor language, Game Oriented Object Lisp (GOOL), was also developed by\nAndy Gavin for ''Crash Bandicoot'' game.\n\nGOAL's primary development and maintenance engineer is no longer available to\nNaughty Dog, and they have transitioned to C++ for future projects due to the\nfact they were bought out by Sony which wanted code interoperability between\ntheir studios. See the page about Lisp developments by Paul Graham\nand Naughty Dog: [http://bc.tech.coop/blog/060118.html]\n","linknr":105,"url":"Game_Oriented_Assembly_Lisp","recorded":1362582519,"links":12,"instances":["computer_programmer","computer_science","computer_science","programming_language","video_game"],"pdf":[],"categories":["Lisp programming language family","Functional languages","Object-oriented programming languages","Common Lisp software"],"headings":["References","External links"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["scheme","programming_language"],["scheme","programming_language"],["side-effect","computer_science"],["garbage_collection","computer_science"],["crash_bandicoot","video_game"],["paul_graham","computer_programmer"]],"members":["paul_graham","garbage_collection","scheme","crash_bandicoot"],"related":["Andy_Gavin","Naughty_Dog","Allegro_Common_Lisp","Scheme_(programming_language)","Imperative_programming","Functional_programming","Scheme_(programming_language)","Side-effect_(computer_science)","PlayStation_2","Garbage_collection_(computer_science)","Inline_expansion","Allegro_Common_Lisp","C++","Game_Oriented_Object_Lisp","Crash_Bandicoot_(video_game)","Paul_Graham_(computer_programmer)","Naughty_Dog"]}