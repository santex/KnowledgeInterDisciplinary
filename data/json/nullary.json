{"micrownet":[],"duck":[],"common":{"milestones":[],"image":[[],[]]},"Lists":[],"created":1373508048,"book":[],"micro-www":{"nullary":[""]},"wiki":{"cat":["Abstract algebra","Universal algebra"],"text":"In logic, mathematics, and computer science, the 'arity' of a function or\noperation is the number of arguments or operands the function or operation\naccepts. The arity of a relation (or predicate) is the dimension of the domain\nin the corresponding Cartesian product. (A function of arity n thus has arity\nn+1 considered as a relation.) The term springs from words like unary, binary,\nternary, etc. Unary functions or predicates may be also called \"monadic\";\nsimilarly, binary functions may be called \"dyadic\".\n\nIn mathematics, depending on the branch, arity may be named type or rank.<ref\nname=\"Hazewinkel2001\"></ref><ref name=\"Schechter1997\"></ref> (These two words\ncan have many other meanings in mathematics though.) In logic and philosophy,\narity is also called adicity and degree.<ref\nname=\"DetlefsenBacon1999\"></ref><ref name=\"CocchiarellaFreund2008\"></ref> In\nlinguistics, arity is usually named [[valency (linguistics)|valency]].<ref\nname=\"Crystal2008\"></ref>\n\nIn computer programming, there is often a syntactical distinction between\noperators and functions; syntactical operators usually have arity 0, 1, or 2.\nFunctions vary widely in the number of arguments, though large numbers can\nbecome unwieldy. Some programming languages also offer support for variadic\nfunctions, i.e. functions syntactically accepting a variable number of\narguments.\n","title":"Arity%23Nullary","headings":["Examples","Other names","See also","References","External links"]},"micro-relation":["2: Binary_operation","1: Logic","1: Mathematics","1: Computer_science","1: Argument_of_a_function","1: Operand","1: Domain_of_a_function","1: Cartesian_product","1: Linguistics","1: Computer_programming","1: Variadic_functions","1: Addition","1: Numeral_system","1: Binary_numeral_system","1: Hexadecimal","1: Latin","1: Unary_operation","1: Ternary_operation","1: Functional_programming","1: Global_variable","1: Unary_operator","1: Factorial","1: Multiplicative_inverse","1: Floor_function","1: Ceiling_function","1: Fractional_part","1: Absolute_value","1: Complex_conjugate","1: Two's_complement","1: Logical_NOT","1: Willard_Van_Orman_Quine","1: Lambda_calculus","1: Functional_programming_language","1: Multiplication_operator","1: C++","1: Perl","1: Ternary_operator","1: Conditional_operator","1: Assembly_language","1: Product_space","1: Multilinear_map","1: Object_composition","1: Tuple","1: Higher-order_function","1: Currying","1: Greek_language","1: Undenary_chess","1: Millenary_Petition","1: Logic_of_relatives","1: Binary_relation","1: Triadic_relation","1: Theory_of_relations","1: Parameter","1: Variadic","1: N-ary_code","1: N-ary_group"]}