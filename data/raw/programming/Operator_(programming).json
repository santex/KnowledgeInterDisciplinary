{"cursor":"9776","size":15,"audio":[],"currentlang":"en","article":"\n\nProgramming languages typically support a set of 'operators': operations which\ndiffer in the calling of syntax and/or the argument passing mode from the\nlanguage's functions. Common examples that differ by syntax are mathematical\narithmetic operations, e.g. \">\" for \"greater than\", with names often outside the\nlanguage's set of identifiers for functions, and called with a syntax different\nfrom the language's syntax for calling functions. Common examples that differ by\nargument passing mode are boolean operations, e.g. a short-circuiting\nconjunction that only evaluates later arguments if earlier ones are not false,\nin a language with strict call-by-value functions.\n\nA language may contain a fixed number of built-in operators (e.g. + - * = in C\nand C++), or it may allow the creation of programmer-defined operators (e.g.\nHaskell). Some programming languages restrict operator symbols to special\ncharacters like '''+''' or while others allow also names like\n'''div''' (e.g. Pascal).\n\nSome built-in operators supported by a language have a direct mapping to a small\nnumber of instructions commonly found on central processing units, though others\n(e.g. '+' used to express string concatenation) may have complicated\nimplementations.\n\nThe specification of a language will specify the precedence and associativity of\nthe operators it supports. Languages which support programmer-defined operators\nrequire the specification of the precedence and associativity of new operator\nsymbols (e.g. Prolog).\n\nMost programming language operators take one or two operands, with a few\nsupporting more operands (e.g., the operator in C). The position of the operator\nwith respect to its operands may be prefix, infix or postfix.\n\nSyntactically operators usually contrast to functions. In most languages,\nfunctions may be seen as a special form of prefix operator with fixed precedence\nlevel and associativity, often with compulsory parentheses e.g.\nFunc(a) (or (Func a) in LISP). Most languages support\nprogrammer-defined functions, but cannot really claim to support programmer-\ndefined operators, unless they have more than prefix notation and more than a\nsingle precedence level. Semantically operators can be seen as special form of\nfunction with different calling notation and a limited number of parameters\n(usually 1 or 2).\n\nA compiler can implement operators and functions with subroutine calls or with\ninline code.\n","linknr":175,"url":"Operator_(programming)","recorded":1362562566,"links":25,"instances":["computer_science","programming_language","programming_language","programming_language","programming_language","programming_language","programming_languages"],"pdf":["http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf","http://stephane.ducasse.free.fr/FreeBooks/BlueBook/Bluebook.pdf"],"categories":["Operators (programming)|","Programming constructs"],"headings":["Operator overloading","Operand coercion","Operator features in programming languages","See also","References"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["pascal","programming_language"],["syntax","programming_languages"],["function","computer_science"],["lisp","programming_language"],["java","programming_language"],["c","programming_language"],["new","c++"],["delete","c++"],["java","programming_language"],["haskell","programming_language"],["pascal","programming_language"],["lisp","programming_language"]],"members":["function","java","lisp","pascal","c","haskell","delete","new","syntax"],"related":["Programming_languages","Operators_in_C_and_C++","Haskell_programming_language","Addition","Pascal_(programming_language)","Machine_code","Central_processing_units","String_concatenation","Order_of_operations","Operator_associativity","Prolog","Unary_operation","Binary_operation","Operands","Polish_notation","Infix_notation","Postfix_notation","Syntax_(programming_languages)","Function_(computer_science)","Lisp_(programming_language)","Subroutine","Inline_expansion","Java_(programming_language)","Perl","Javascript","ALGOL_68","ASCII","C_(programming_language)","Sizeof","C++","Operators_in_C_and_C++","Sizeof","New_(C++)","Delete_(C++)","Exception_handling","Decltype","Java_(programming_language)","Instanceof","Haskell_(programming_language)","Type_class","Pascal_(programming_language)","Modulo_operation","Logical_conjunction","Logical_disjunction","Seed7","Complex_conjugate","Remainder","Modulo_operation","Modulo_operation","Logical_conjunction","Logical_disjunction","Eiffel","Prolog","Lisp_(programming_language)","Smalltalk","Perl","Relational_operator"]}