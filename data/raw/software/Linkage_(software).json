{"cursor":"3661","size":15,"audio":[],"currentlang":"en","article":"In programming languages, particularly C++, 'linkage' describes how names can or\ncan not refer to the same entity throughout the whole program or one single\ntranslation unit.\n\nThe static keyword is used in C to restrict the visibility of a\nfunction or variable to its translation unit. This is also valid in C++. (C++\n98/03 deprecated this usage in favor of anonymous namespaces, but is no longer\ndeprecated in C++ 11.) Also, C++ implicitly treats any const namespace-\nscope variable as having internal linkage unless it is explicitly declared\nextern , unlike C.\n\nA name's linkage is related to, but distinct from, its scope. The scope of a\nname is the part of a translation unit where it is visible. For instance, a name\nwith global scope (which is the same as file-scope in C and the same as the\nglobal namespace-scope in C++) is visible in any part of the file. Its scope\nwill end at the end of the translation unit, whether or not that name has been\ngiven external or internal linkage.\n\nIf the name has external linkage, the entity that name denotes may be referred\nto from another translation unit using a distinct declaration for that same\nname, and from other scopes within the same translation unit using distinct\ndeclarations. Were the name given internal linkage, such a declaration would\ndenote a distinct entity, although using the same name, but its entity could be\nreferred to by distinct declarations within the same translation unit. A name\nthat has no linkage at all cannot be referred to from declarations in different\nscopes, not even from within the same translation unit. Examples of such names\nare parameters of functions and local variables. The details differ between C\n(where only objects and functions - but not types have linkage) and C++ and\nbetween this simplified overview.\n\nLinkage between languages must be done with some care, as different languages\nadorn their external symbols differently. A common idiom uses extern\n\"C\" to link C++ and C code.\n","linknr":85,"url":"Linkage_(software)","recorded":1362559710,"links":11,"instances":["computing","programming","programming"],"pdf":["http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf"],"categories":["Compilers","Programming language implementation"],"headings":["Linkage in C","See also","References"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["translation_unit","programming"],["scope","programming"],["linker","computing"]],"members":["linker","translation_unit","scope"],"related":["C++","Translation_unit_(programming)","Anonymous_namespace","Scope_(programming)","Name_mangling","Extern_\"C\"","Application_binary_interface","Compatibility_of_C_and_C++","Linker_(computing)","Name_mangling"]}