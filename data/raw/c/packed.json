{"cursor":"23925","size":15,"audio":[],"currentlang":"en","article":"\n'Data structure alignment' is the way data is arranged and accessed in computer\nmemory. It consists of two separate but related issues: data alignment and data\nstructure padding. When a modern computer reads from or writes to a memory\naddress, it will do this in word sized chunks (e.g. 4 byte chunks on a 32-bit\nsystem). Data alignment means putting the data at a memory offset equal to some\nmultiple of the word size, which increases the system's performance due to the\nway the CPU handles memory. To align the data, it may be necessary to insert\nsome meaningless bytes between the end of the last data structure and the start\nof the next, which is data structure padding.\n\nFor example, when the computer's word size is 4 bytes (a byte meaning 8 bits),\nthe data to be read should be at a memory offset which is some multiple of 4.\nWhen this is not the case, e.g. the data starts at the 14th byte instead of the\n16th byte, then the computer has to read two 4-byte chunks and do some\ncalculation before the requested data has been read, or it may generate an\nalignment fault. Even though the previous data structure ends at the 14th byte,\nthe next data structure should start at the 16th byte. Two padding bytes are\ninserted between the two data structures to align the next data structure to the\n16th byte.\n\nAlthough data structure alignment is a fundamental issue for all modern\ncomputers, many computer languages and computer language implementations handle\ndata alignment automatically. Ada, {{cite web\n| url = http://www.adacore.com/wp-content/files/auto_update/gnat-unw-\n| docs/html/gnat_rm_7.html title = Ada Representation Clauses and Pragmas\n| accessdate = 2011-01-11\n}} {{cite manual\n| title = SPARCompiler Ada Programmer's Guide section = F.8 Representation\n| Clauses sectionurl = http://docs.sun.com/app/docs/doc/801-\n| 4862/6hvbkinua?l=en&a=view accessdate = 2011-01-11\n}} certain C and C++ implementations, D, {{cite web\n| url = http://dlang.org/attribute.html#align title = Attributes - D Programming\n| Language: Align Attribute accessdate = 2012-04-13\n}} and assembly language allow at least partial control of data structure\npadding, which may be useful in certain special circumstances.\n","linknr":221,"url":"packed","recorded":1362891425,"links":18,"instances":["programming_language","computing","data_type","programming_language","programming_language"],"pdf":[],"categories":["Compiler construction","Composite data types"],"headings":["Definitions","Problems","Architectures","Data structure padding","Typical alignment of C structs on x86","Allocating memory aligned to cache lines","Hardware significance of alignment requirements","See also","References","Further reading","External links"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["word","data_type"],["ada","programming_language"],["c","programming_language"],["d","programming_language"],["interpreter","computing"],["c","programming_language"]],"members":["c","interpreter","word","ada","d"],"related":["Word_(data_type)","CPU","Bus_error","Ada_(programming_language)","C_(programming_language)","C++","D_(programming_language)","Assembly_language","Computer_memory","Byte","Binary_numeral_system","Primitive_data_type","Translation_lookaside_buffer","Page_fault","RISC","MIPS_architecture","DEC_Alpha","Compilers","X86","SSE2","X86","RISC","Bytes","Compiler","Interpreter_(computing)","Structure","C_(programming_language)","C++","Space-time_tradeoff","Memory_space","Endianness","Network_byte_order","Modulo_operation","Bitwise_AND","Bitwise_NOT","Data_structure","Microsoft","Visual_C++","Borland","CodeGear","C++Builder","Digital_Mars","GNU","GNU_Compiler_Collection","Microsoft","Borland","GNU","MSDN_Library","Cache_line","Stride_of_an_array","Type_punning"]}